const ethers = require('ethers')
const dotenv = require("dotenv").config()
const provider = new ethers.providers.JsonRpcProvider(`https://optimism-mainnet.infura.io/v3/${process.env.INFURA_API}`)

//addresses
const FOAM_ADDRESS = '0x79E6c6b6aABA4432FAbacB30cC0C879D8f3E598e';
const FOAM_MINT_BURN_ADDRESS = '0x0000000000000000000000000000000000000000';
const UNI_V3_ADDRESS = "0xB2e1aa3bE89504fCC6373139E2bD5575A92A5a26";
const UNI_V3_LIQUIDITY_ADDRESS = '0xC36442b4a4522E871399CD717aBDD847Ab11FE88';
const VELEDROME_POOL_ADDRESS = '0xBFfaE96495480581813377448a2BfeA4057d627E';
const VELEDROME_LIQUIDITY_TOKEN = '0xbffae96495480581813377448a2bfea4057d627e';
const VELEDROME_EXECUTIVE_ADDRESS = '0xE6C3e27D93eE2296b8f05467fE9B7A31c9e467A1';
const ODOS_ROUTER_ADDRESS = '0xCa423977156BB05b13A2BA3b76Bc5419E2fE9680';
const ODOS_SALES_ROUTER_ADDRESS = '0x926fAAfcE6148884CD5cF98Cd1878f865E8911Bf';
const ONE_INCH_ROUTER_ADDRESS = '0x1111111254EEB25477B68fb85Ed929f73A960582';
const PARASWAP_ROUTER_ADDRESS = '0xDEF171Fe48CF0115B1d80b88dc8eAB59176FEe57';
const OKX_ROUTER_ADDRESSES = ['0x443EF018e182d409bcf7f794d409bCea4C73C2C7', '0xf332761c673b59B21fF6dfa8adA44d78c12dEF09'];
const VELEDROME_REWARDS_ADDRESS = '0x0583A0a9fD4AF1A93b515A8B57D33B39B2941306';


//ABIs
const FOAM_TOKEN_ABI = JSON.parse(require('../abi/foamtoken').result);
const UNI_V3_ABI = JSON.parse(require('../abi/univ3pool.json').result);
const UNI_V3_LIQUIDITY_ABI = JSON.parse(require('../abi/univ3liquidity.json').result);
const VELEDROME_POOL_ABI = JSON.parse(require('../abi/veledromepoolabi.json').result);
const VELEDROME_LIQUIDITY_ABI = JSON.parse(require('../abi/veledromeliquidityabi.json').result);

//contracts/methods
const FOAM_TOKEN_CONTRACT = new ethers.Contract(FOAM_ADDRESS, FOAM_TOKEN_ABI, provider);
const FOAM_TOKEN_XFER_METHOD = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
const UNI_V3_TOKEN_CONTRACT = new ethers.Contract(UNI_V3_ADDRESS, UNI_V3_ABI, provider);
const UNI_V3_LIQUIDITY_CONTRACT = new ethers.Contract(UNI_V3_LIQUIDITY_ADDRESS, UNI_V3_LIQUIDITY_ABI, provider);
const VELEDROME_POOL_CONTRACT = new ethers.Contract(VELEDROME_POOL_ADDRESS, VELEDROME_POOL_ABI, provider);
const VELEDROME_ROUTER_CONTRACT = new ethers.Contract(VELEDROME_LIQUIDITY_TOKEN, VELEDROME_LIQUIDITY_ABI, provider);

//filters
const FOAM_TRANSFER_FILTER = FOAM_TOKEN_CONTRACT.filters.Transfer();
  
const UNI_BUY_FILTER = FOAM_TOKEN_CONTRACT.filters.Transfer(UNI_V3_ADDRESS, null );
const UNI_SELL_FILTER= FOAM_TOKEN_CONTRACT.filters.Transfer(null, UNI_V3_ADDRESS);

const VELEDROME_BUY_FILTER = FOAM_TOKEN_CONTRACT.filters.Transfer(VELEDROME_POOL_ADDRESS, null);
const VELEDROME_SELL_FILTER = FOAM_TOKEN_CONTRACT.filters.Transfer(null, [VELEDROME_EXECUTIVE_ADDRESS, VELEDROME_POOL_ADDRESS]);

const ONE_INCH_BUY_FILTER = FOAM_TOKEN_CONTRACT.filters.Transfer([UNI_V3_ADDRESS, VELEDROME_POOL_ADDRESS], ONE_INCH_ROUTER_ADDRESS);
const ONE_INCH_SELL_FILTER = FOAM_TOKEN_CONTRACT.filters.Transfer(ONE_INCH_ROUTER_ADDRESS, [UNI_V3_ADDRESS, VELEDROME_EXECUTIVE_ADDRESS]);

const ODOS_BUY_FILTER = FOAM_TOKEN_CONTRACT.filters.Transfer([UNI_V3_ADDRESS, VELEDROME_POOL_ADDRESS,], ODOS_ROUTER_ADDRESS);
const ODOS_SELL_FILTER = FOAM_TOKEN_CONTRACT.filters.Transfer(ODOS_SALES_ROUTER_ADDRESS, [UNI_V3_ADDRESS, VELEDROME_EXECUTIVE_ADDRESS]);

const PARASWAP_BUY_FILTER = FOAM_TOKEN_CONTRACT.filters.Transfer([UNI_V3_ADDRESS, VELEDROME_POOL_ADDRESS], PARASWAP_ROUTER_ADDRESS);
const PARASWAP_SELL_FILTER = FOAM_TOKEN_CONTRACT.filters.Transfer(PARASWAP_ROUTER_ADDRESS, [UNI_V3_ADDRESS, VELEDROME_EXECUTIVE_ADDRESS]);

const OKX_BUY_FILTER = FOAM_TOKEN_CONTRACT.filters.Transfer([UNI_V3_ADDRESS, VELEDROME_POOL_ADDRESS], OKX_ROUTER_ADDRESSES);
const OKX_SELL_FILTER = FOAM_TOKEN_CONTRACT.filters.Transfer(OKX_ROUTER_ADDRESSES, [UNI_V3_ADDRESS, VELEDROME_EXECUTIVE_ADDRESS]);

const MINT_EVENT_FILTER = FOAM_TOKEN_CONTRACT.filters.Mint();
const BURN_EVENT_FILTER = FOAM_TOKEN_CONTRACT.filters.Burn();
const MINT_TRANSFER_FILTER = FOAM_TOKEN_CONTRACT.filters.Transfer(FOAM_MINT_BURN_ADDRESS, null);
const BURN_TRANSFER_FILTER = FOAM_TOKEN_CONTRACT.filters.Transfer(null, FOAM_MINT_BURN_ADDRESS);

const ARBITRAGE_TRADE_FILTER = FOAM_TOKEN_CONTRACT.filters.Transfer( [ UNI_V3_ADDRESS, VELEDROME_POOL_ADDRESS ], [ UNI_V3_ADDRESS, VELEDROME_POOL_ADDRESS ], null );

//exporting all constants
module.exports = {
    FOAM_ADDRESS,
    FOAM_MINT_BURN_ADDRESS,
    UNI_V3_ADDRESS,
    UNI_V3_LIQUIDITY_ADDRESS,
    UNI_V3_LIQUIDITY_ABI,
    VELEDROME_POOL_ADDRESS,
    VELEDROME_LIQUIDITY_TOKEN,
    VELEDROME_EXECUTIVE_ADDRESS,
    ODOS_ROUTER_ADDRESS,
    ODOS_SALES_ROUTER_ADDRESS,
    ONE_INCH_ROUTER_ADDRESS,
    PARASWAP_ROUTER_ADDRESS,
    OKX_ROUTER_ADDRESSES,
    VELEDROME_REWARDS_ADDRESS,
    FOAM_TOKEN_ABI,
    UNI_V3_ABI,
    VELEDROME_POOL_ABI,
    VELEDROME_LIQUIDITY_ABI,
    FOAM_TOKEN_CONTRACT,
    UNI_V3_TOKEN_CONTRACT,
    UNI_V3_LIQUIDITY_CONTRACT,
    VELEDROME_POOL_CONTRACT,
    VELEDROME_ROUTER_CONTRACT,
    FOAM_TRANSFER_FILTER,
    UNI_BUY_FILTER,
    UNI_SELL_FILTER,
    VELEDROME_BUY_FILTER,
    VELEDROME_SELL_FILTER,
    ONE_INCH_BUY_FILTER,
    ONE_INCH_SELL_FILTER,
    ODOS_BUY_FILTER,
    ODOS_SELL_FILTER,
    PARASWAP_BUY_FILTER,
    PARASWAP_SELL_FILTER,
    OKX_BUY_FILTER,
    OKX_SELL_FILTER,
    MINT_EVENT_FILTER,
    BURN_EVENT_FILTER,
    MINT_TRANSFER_FILTER,
    BURN_TRANSFER_FILTER,
    ARBITRAGE_TRADE_FILTER,
    FOAM_TOKEN_XFER_METHOD
};